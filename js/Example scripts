Example Scripts

//Creating playlist of all tracks without artwork

var iTunesApp = WScript.CreateObject("iTunes.Application"); 
var tracks = iTunesApp.LibraryPlaylist.Tracks;
var numTracks = tracks.Count;
var i;
NoArtPlaylist = iTunesApp.CreatePlaylist("No Artwork");

for (i = 1; i <= numTracks; i++) 
{ 	
	var currTrack = tracks.Item(i); 
	if ( currTrack.Artwork.Count == 0 ) 
		NoArtPlaylist.AddTrack(currTrack);
} 

//Creating playlist of all songs without lyrics

var iTunesApp = WScript.CreateObject("iTunes.Application"); 
var tracks = iTunesApp.LibraryPlaylist.Tracks;
var numTracks = tracks.Count;
var i;
NoLyricsPlaylist = iTunesApp.CreatePlaylist("No Lyrics");

for (i = 1; i <= numTracks; i++) 
{ 	try {
	var currTrack = tracks.Item(i); 
	if ( currTrack.Lyrics == "" ) 
		NoLyricsPlaylist.AddTrack(currTrack);
	}
	catch(er)
	{
	}
} 

//Creating playlist of all songs that are the only one of that artist owned by you

// put your playlist name here
var 	PlaylistName = "One Hit Wonders";

var	iTunesApp = WScript.CreateObject("iTunes.Application");

var	mainLibrary = iTunesApp.LibraryPlaylist;
// if you want to use some other playlist as the base to look through, uncomment this next line
// and change the "-All Songs" to the base playlist you want to use.:
//var	mainLibrary = iTunesApp.LibrarySource.Playlists.ItemByName("-All Songs");



// --- no need to change anything below this line ---
var	tracks = mainLibrary.Tracks;
var	numTracks = tracks.Count;
var 	i;
var	artistArray = new Array();
for (i = 1; i <= numTracks; i++)
{
	var	currTrack = tracks.Item(i);
	var	artist = currTrack.Artist;

	if ((artist != undefined) && (artist != ""))
	{
		if (artistArray[artist] == undefined)
		{
			artistArray[artist] = new Array();
		}
		artistArray[artist].push(currTrack);
	}
}
OHWPlaylist = iTunesApp.CreatePlaylist(PlaylistName);
for (var artistNameKey in artistArray)
{
	var trackArray = artistArray[artistNameKey];

	if (trackArray.length == 1)
	{
		var	currTrack = trackArray[0];
		OHWPlaylist.AddTrack(currTrack);
	}
}

//Importing lyrics from evillyrics

/*

 Don't change anything after this line unless you know what you are doing.

*/

var ITTrackKindFile = 1;
var iTunesApp = WScript.CreateObject("iTunes.Application"); 
var tracks = iTunesApp.LibraryPlaylist.Tracks;
var numTracks = tracks.Count;
var i;
var fso = new ActiveXObject("Scripting.FileSystemObject");

var count = 0;
for (i = 1; i <= numTracks; i++) 
{ 	
	var currTrack = tracks.Item(i);

	// got lyrics?
	if (currTrack.Kind == ITTrackKindFile && ! currTrack.Podcast )
	{	
		try
		{
		if (currTrack.Lyrics == "" || updateAll == true)
		{
			// figure out the filename to look for
			tempartist = currTrack.Artist;
			tempname = currTrack.Name;
			
			// kill everything after the period (disabled)
//			tempartist = tempartist.replace(/[\.].*/,'');
//			tempname = tempname.replace(/[\.].*/,'');
			
			// replace single quotes with underscores
			tempartist = tempartist.replace(/[\']+/g,'_');
			tempname = tempname.replace(/[\']+/g,'_');

			// kill everything in parenths or brackets
			tempartist = tempartist.replace(/[\(\[].*[\)\]]/g,'');
			tempname = tempname.replace(/[\(\[].*[\)\]]/g,'');

			// kill multiple spaces			
			tempartist = tempartist.replace(/[ ]+/g,' ');
			tempname = tempname.replace(/[ ]+/g,' ');

			// just to be sure
			tempartist = tempartist.replace(/[ ]+/g,' ');
			tempname = tempname.replace(/[ ]+/g,' ');

			// kill leading and trailing whitespace
			tempartist = tempartist.replace(/^\s+|\s+$/g,'');
			tempname = tempname.replace(/^\s+|\s+$/g,'');

			// anything else that ain't a alnum or period becomes an underscore
			tempartist = tempartist.replace(/[^0-9a-zA-Zภเแไใโ็ษ้่๊ิ๖๔๓๓๕�๚๙อํi๑\. ]+/g,'_');
			tempname = tempname.replace(/[^0-9a-zA-Zภเแไใโ็ษ้่๊ิ๖๔๓๓๕�๚๙อํi๑\. ]+/g,'_');
			
			var fullpath = lyricsdir + tempartist.charAt(0) + "\\" + tempartist + " - " + tempname + ".txt";

			if (fso.FileExists(fullpath))
			{
				// it's there, read it
				var tf = fso.OpenTextFile(fullpath,1);
				var mylyrics = tf.ReadAll();
				tf.Close();

				// eliminate the footer
				mylyrics = mylyrics.replace(/----------------.*[\r\n]+.*[\r\n]+.*/,'');

				// add 'em
				currTrack.Lyrics = mylyrics;
				count++;
			}
		}
		}
		catch(er)
		{
		// ignore these sorts of errors
		}
	}
} 

WScript.Echo ("Added Lyrics to " + count + " tracks");

//Removing all lyrics from all songs

var ITTrackKindFile = 1;
var iTunesApp = WScript.CreateObject("iTunes.Application");
var tracks    = iTunesApp.LibraryPlaylist.Tracks;
var numTracks = tracks.Count;
var i;
for (i = 1; i <= numTracks; i++)
{
	var currTrack = tracks.Item(i);
	// is this a file track?
	if (currTrack.Kind == ITTrackKindFile)
	{
	
	try {
		if (currTrack.Lyrics != "") 
		{
			currTrack.Lyrics = "";
		}
	}
	catch(er)
	{
	// ignore these errors
	}
	
	}
}
WScript.Echo("All Lyrics Cleared!")

//Reload update library from tags

var iTunesApp = WScript.CreateObject("iTunes.Application");
var tracks    = iTunesApp.LibraryPlaylist.Tracks;
var numTracks = tracks.Count;
var i;
for (i = 1; i <= numTracks; i++)
{
	var currTrack = tracks.Item(i);
	currTrack.UpdateInfoFromFile();
}


//List of dead tracks 

var ITTrackKindFile	= 1;
var	iTunesApp = WScript.CreateObject("iTunes.Application");
var	deletedTracks = 0;
var	mainLibrary = iTunesApp.LibraryPlaylist;
var	tracks = mainLibrary.Tracks;
var	numTracks = tracks.Count;
var	i;

var fso, tf;
fso = new ActiveXObject("Scripting.FileSystemObject");
tf = fso.CreateTextFile("Dead Tracks.txt", true);

while (numTracks != 0)
{
	var	currTrack = tracks.Item(numTracks);
	
	// is this a file track?
	if (currTrack.Kind == ITTrackKindFile)
	{
		// yes, does it have an empty location?
		if (currTrack.Location == "")
		{
			// write info about the track to a file
			tf.WriteLine(currTrack.Artist + "," + currTrack.Album + "," + currTrack.Name);
			deletedTracks++;
		}
	}
	
	numTracks--;
}

if (deletedTracks > 0)
{
	if (deletedTracks == 1)
	{
		WScript.Echo("Found 1 dead track.");
	}
	else
	{
		WScript.Echo("Found " + deletedTracks + " dead tracks.");
	}
}
else
{
	WScript.Echo("No dead tracks were found.");
}
tf.Close();

//(Apple Original) Remove all dead tracks

var ITTrackKindFile	= 1;
var	iTunesApp = WScript.CreateObject("iTunes.Application");
var	deletedTracks = 0;
var	mainLibrary = iTunesApp.LibraryPlaylist;
var	tracks = mainLibrary.Tracks;
var	numTracks = tracks.Count;
var	i;

while (numTracks != 0)
{
	var	currTrack = tracks.Item(numTracks);
	
	// is this a file track?
	if (currTrack.Kind == ITTrackKindFile)
	{
		// yes, does it have an empty location?
		if (currTrack.Location == "")
		{
			// yes, delete it
			currTrack.Delete();
			deletedTracks++;
		}
	}
	
	numTracks--;
}

if (deletedTracks > 0)
{
	if (deletedTracks == 1)
	{
		WScript.Echo("Removed 1 dead track.");
	}
	else
	{
		WScript.Echo("Removed " + deletedTracks + " dead tracks.");
	}
}
else
{
	WScript.Echo("No dead tracks were found.");
}